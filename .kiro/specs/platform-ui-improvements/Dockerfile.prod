# Stage 1: Builder
# This stage installs dependencies and builds the application.
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /app

# Install system dependencies required for building Python packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    gettext && \
    rm -rf /var/lib/apt/lists/*

# Install poetry
RUN pip install poetry

# Copy only the dependency files to leverage Docker cache
COPY poetry.lock pyproject.toml /app/

# Install project dependencies
RUN poetry config virtualenvs.create false && \
    poetry install --no-dev --no-interaction --no-ansi

# Copy the rest of the application
COPY . /app/

# Collect static files
RUN python manage.py collectstatic --noinput

# Stage 2: Production
# This stage creates the final, lean production image.
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Create a non-root user for security
RUN addgroup --system app && adduser --system --group app

# Set work directory
WORKDIR /app

# Copy installed dependencies and static files from the builder stage
COPY --from=builder /app /app

# Change ownership of the app directory to the non-root user
RUN chown -R app:app /app

# Switch to the non-root user
USER app

# Expose the port the app runs on
EXPOSE 8000

# The command to run the application will be specified in Coolify's service configuration.
# For example: gunicorn core.asgi:application -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
