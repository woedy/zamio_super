"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env and optional .env.local (without overriding os env)
load_dotenv()  # .env in project root
try:
    load_dotenv(dotenv_path=Path(__file__).resolve().parent.parent / '.env.local', override=False)
except Exception:
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# For local/dev a fallback is provided, but production must set SECRET_KEY via env.
SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-insecure-secret-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Hosts / CSRF
# Default to safer localhost-only in absence of env override.
def _split_env_list(value: str) -> list[str]:
    """Return a sanitized list from a comma separated env string."""

    if not value:
        return []
    return [item.strip() for item in value.split(',') if item.strip()]


ALLOWED_HOSTS = _split_env_list(os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1'))
CSRF_TRUSTED_ORIGINS = _split_env_list(os.environ.get('CSRF_TRUSTED_ORIGINS', ''))

# Email configuration
# Default to file-based backend for local development; override via env for SMTP.
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.filebased.EmailBackend')
EMAIL_FILE_PATH = Path(os.environ.get('EMAIL_FILE_PATH', BASE_DIR / 'sent_emails'))

EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '0')) or None
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'False').lower() == 'true'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() == 'true'
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'Zamio <no-reply@localhost>')
BASE_URL = os.environ.get('BASE_URL', "0.0.0.0:90")


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "channels",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "django_celery_beat",

    "core",
    "accounts",
    "activities",
    "artists",
    "bank_account",
    "mr_admin",
    "stations",
    "music_monitor",
    "streamer",
    "fan",
    #"storages",
    "notifications",
    "publishers",
    "royalties",
    "disputes",
]


AUTH_USER_MODEL = "accounts.User"


MIDDLEWARE = [
    # CORS should be as high as possible, especially before CommonMiddleware
    "corsheaders.middleware.CorsMiddleware",
    "accounts.middleware.SecurityHeadersMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "accounts.middleware.RateLimitMiddleware",
    "accounts.middleware.AuditLoggingMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Use PostgreSQL in production, SQLite in development
# Database
if os.environ.get('DATABASE_URL'):
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(os.environ['DATABASE_URL'])
    }
    
    # Enhanced PostgreSQL configuration for performance
    # Note: CONN_MAX_AGE is a top-level Django setting for DB connections; MAX_CONNS is not supported.
    DATABASES['default'].update({
        'CONN_MAX_AGE': int(os.environ.get('DB_CONN_MAX_AGE', '600')),  # 10 minutes
    })
    
    # Read replica configuration for analytics queries
    if os.environ.get('DATABASE_READ_URL'):
        DATABASES['read_replica'] = dj_database_url.parse(os.environ['DATABASE_READ_URL'])
        # Copy OPTIONS if present
        default_options = DATABASES['default'].get('OPTIONS')
        if default_options:
            DATABASES['read_replica']['OPTIONS'] = default_options.copy()
        
        # Database router for read/write splitting
        DATABASE_ROUTERS = ['core.database_router.DatabaseRouter']
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
            "OPTIONS": {
                "timeout": 20,  # Increase timeout for SQLite
            }
        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"


STATIC_ROOT = os.path.join(BASE_DIR, "static_cdn", "static_root")  # For static files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # Separate media files
#DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Enhanced Celery Configuration for Performance
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://redis:6379/0')

# Basic serialization settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Performance optimizations
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = int(os.environ.get('CELERY_PREFETCH_MULTIPLIER', '1'))
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Task execution limits
CELERY_TASK_SOFT_TIME_LIMIT = int(os.environ.get('CELERY_SOFT_TIME_LIMIT', '300'))  # 5 minutes
CELERY_TASK_TIME_LIMIT = int(os.environ.get('CELERY_TIME_LIMIT', '600'))  # 10 minutes

# Result backend settings
CELERY_RESULT_EXPIRES = int(os.environ.get('CELERY_RESULT_EXPIRES', '3600'))  # 1 hour
CELERY_RESULT_PERSISTENT = True

# Monitoring and events
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Timezone settings
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# Queue configuration
CELERY_TASK_DEFAULT_QUEUE = 'normal'
CELERY_TASK_DEFAULT_EXCHANGE = 'tasks'
CELERY_TASK_DEFAULT_EXCHANGE_TYPE = 'direct'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'normal'

# Broker connection settings
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 10

# Worker settings
CELERY_WORKER_CONCURRENCY = int(os.environ.get('CELERY_WORKER_CONCURRENCY', '4'))
CELERY_WORKER_MAX_TASKS_PER_CHILD = int(os.environ.get('CELERY_MAX_TASKS_PER_CHILD', '1000'))

# Beat scheduler settings
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

from celery import Celery

app = Celery("core")
app.config_from_object("django.conf:settings", namespace="CELERY")
app.autodiscover_tasks()


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.environ.get('REDIS_URL', 'redis://redis:6379/0')],
        },
    },
}

# APPEND_SLASH setting - disable for API endpoints to prevent POST redirect issues
APPEND_SLASH = False

CORS_ALLOW_CREDENTIALS = True


def _env_flag(name: str, default: bool) -> bool:
    return os.environ.get(name, str(default)).lower() in {"1", "true", "yes"}


# Secure headers / cookie defaults
SECURE_SSL_REDIRECT = _env_flag('SECURE_SSL_REDIRECT', not DEBUG)

if SECURE_SSL_REDIRECT or _env_flag('SECURE_HSTS_ENABLED', not DEBUG):
    SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = _env_flag('SECURE_HSTS_INCLUDE_SUBDOMAINS', True)
    SECURE_HSTS_PRELOAD = _env_flag('SECURE_HSTS_PRELOAD', True)
else:
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_REFERRER_POLICY = os.environ.get('SECURE_REFERRER_POLICY', 'strict-origin-when-cross-origin')
SECURE_CONTENT_TYPE_NOSNIFF = True

SESSION_COOKIE_SECURE = _env_flag('SESSION_COOKIE_SECURE', not DEBUG)
CSRF_COOKIE_SECURE = _env_flag('CSRF_COOKIE_SECURE', not DEBUG)
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = os.environ.get('SESSION_COOKIE_SAMESITE', 'Lax')
CSRF_COOKIE_SAMESITE = os.environ.get('CSRF_COOKIE_SAMESITE', 'Lax')

_csp_directives = {
    'default-src': os.environ.get('CSP_DEFAULT_SRC', "'self'"),
    'script-src': os.environ.get('CSP_SCRIPT_SRC', "'self'"),
    'style-src': os.environ.get('CSP_STYLE_SRC', "'self' 'unsafe-inline'" if DEBUG else "'self'"),
    'img-src': os.environ.get('CSP_IMG_SRC', "'self' data:"),
    'font-src': os.environ.get('CSP_FONT_SRC', "'self' data:"),
    'connect-src': os.environ.get('CSP_CONNECT_SRC', "'self'"),
    'frame-ancestors': os.environ.get('CSP_FRAME_ANCESTORS', "'none'"),
}

CONTENT_SECURITY_POLICY = "; ".join(
    f"{directive} {value}"
    for directive, value in _csp_directives.items()
    if value
)

PERMISSIONS_POLICY = os.environ.get(
    'PERMISSIONS_POLICY',
    'camera=(), microphone=(), geolocation=()'
)

CROSS_ORIGIN_OPENER_POLICY = os.environ.get('CROSS_ORIGIN_OPENER_POLICY', 'same-origin')
CROSS_ORIGIN_EMBEDDER_POLICY = os.environ.get('CROSS_ORIGIN_EMBEDDER_POLICY', 'require-corp')
CROSS_ORIGIN_RESOURCE_POLICY = os.environ.get('CROSS_ORIGIN_RESOURCE_POLICY', 'same-origin')


# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'user_id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'accounts.api.custom_jwt.CustomJWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'EXCEPTION_HANDLER': 'accounts.api.exception_handlers.custom_exception_handler',
}




REDIS_URL = os.environ.get('REDIS_URL')

if REDIS_URL:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-zamio-cache'
        }
    }


# ACRCloud Configuration
ACRCLOUD_ACCESS_KEY = os.environ.get('ACRCLOUD_ACCESS_KEY', '')
ACRCLOUD_ACCESS_SECRET = os.environ.get('ACRCLOUD_ACCESS_SECRET', '')
ACRCLOUD_HOST = os.environ.get('ACRCLOUD_HOST', 'identify-eu-west-1.acrcloud.com')
ACRCLOUD_REGION = os.environ.get('ACRCLOUD_REGION', 'eu-west-1')

# Audio Detection Configuration
AUDIO_DETECTION_CONFIG = {
    'LOCAL_CONFIDENCE_THRESHOLD': float(os.environ.get('LOCAL_CONFIDENCE_THRESHOLD', '0.8')),
    'ACRCLOUD_CONFIDENCE_THRESHOLD': float(os.environ.get('ACRCLOUD_CONFIDENCE_THRESHOLD', '0.7')),
    'HYBRID_FALLBACK_ENABLED': os.environ.get('HYBRID_FALLBACK_ENABLED', 'True').lower() == 'true',
    'MAX_RETRY_ATTEMPTS': int(os.environ.get('MAX_RETRY_ATTEMPTS', '3')),
    'PROCESSING_TIMEOUT_SECONDS': int(os.environ.get('PROCESSING_TIMEOUT_SECONDS', '30')),
}

# PRO Integration Configuration
PRO_INTEGRATION_CONFIG = {
    'DEFAULT_PRO': os.environ.get('DEFAULT_PRO', 'ghamro'),
    'RECIPROCAL_AGREEMENTS_ENABLED': os.environ.get('RECIPROCAL_AGREEMENTS_ENABLED', 'True').lower() == 'true',
    'FOREIGN_PRO_RATE_PERCENTAGE': float(os.environ.get('FOREIGN_PRO_RATE_PERCENTAGE', '15.0')),
    'LOCAL_PRO_RATE_PERCENTAGE': float(os.environ.get('LOCAL_PRO_RATE_PERCENTAGE', '10.0')),
}