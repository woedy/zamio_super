# Generated by Django 5.1.12 on 2025-09-22 15:29

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("artists", "0002_initial"),
        ("stations", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SnippetIngest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chunk_id", models.CharField(max_length=255, unique=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("duration_seconds", models.IntegerField(blank=True, null=True)),
                ("received_at", models.DateTimeField(auto_now_add=True)),
                ("processed", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="StreamLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("played_at", models.DateTimeField(blank=True, null=True)),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("stop_time", models.DateTimeField(blank=True, null=True)),
                ("duration", models.DurationField(blank=True, null=True)),
                (
                    "royalty_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "avg_confidence_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("claimed", models.BooleanField(default=False)),
                ("flagged", models.BooleanField(default=False)),
                (
                    "dispute_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Flagged", "Flagged"),
                            ("Pending", "Pending"),
                            ("Verified", "Verified"),
                            ("Resolving", "Resolving"),
                            ("Review", "Review"),
                            ("Resolved", "Resolved"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("disput_comments", models.TextField(blank=True, null=True)),
                ("is_archived", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="AudioDetection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "detection_id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("session_id", models.UUIDField(db_index=True)),
                (
                    "detected_title",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "detected_artist",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "detected_album",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "detection_source",
                    models.CharField(
                        choices=[
                            ("local", "Local Fingerprinting"),
                            ("acrcloud", "ACRCloud External"),
                            ("hybrid", "Hybrid Detection"),
                        ],
                        default="local",
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=4, default=0, max_digits=5),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Processing"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("retry", "Retry Required"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "isrc",
                    models.CharField(
                        blank=True, db_index=True, max_length=12, null=True
                    ),
                ),
                (
                    "iswc",
                    models.CharField(
                        blank=True, db_index=True, max_length=20, null=True
                    ),
                ),
                (
                    "pro_affiliation",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ghamro", "GHAMRO (Ghana)"),
                            ("ascap", "ASCAP (USA)"),
                            ("bmi", "BMI (USA)"),
                            ("prs", "PRS (UK)"),
                            ("sacem", "SACEM (France)"),
                            ("gema", "GEMA (Germany)"),
                            ("jasrac", "JASRAC (Japan)"),
                            ("socan", "SOCAN (Canada)"),
                            ("apra", "APRA (Australia)"),
                            ("unknown", "Unknown/Unaffiliated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("audio_fingerprint", models.TextField(blank=True, null=True)),
                ("fingerprint_version", models.CharField(default="1.0", max_length=10)),
                (
                    "audio_segment_hash",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("detected_at", models.DateTimeField(auto_now_add=True)),
                ("audio_timestamp", models.DateTimeField()),
                ("duration_seconds", models.IntegerField(blank=True, null=True)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("retry_count", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("acrcloud_response", models.JSONField(blank=True, default=dict)),
                ("external_metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audio_detections",
                        to="stations.station",
                    ),
                ),
                (
                    "track",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detections",
                        to="artists.track",
                    ),
                ),
            ],
            options={
                "ordering": ["-detected_at"],
            },
        ),
        migrations.CreateModel(
            name="MatchCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("matched_at", models.DateTimeField(auto_now_add=True)),
                (
                    "avg_confidence_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("processed", models.BooleanField(default=False)),
                ("failed_reason", models.TextField(blank=True, null=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="match_station",
                        to="stations.station",
                    ),
                ),
                (
                    "station_program",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="match_station_program",
                        to="stations.stationprogram",
                    ),
                ),
                (
                    "track",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="match_track",
                        to="artists.track",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FailedPlayLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("will_retry", models.BooleanField(default=True)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="music_monitor.matchcache",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[("Radio", "Radio"), ("Streaming", "Streaming")],
                        max_length=50,
                    ),
                ),
                ("played_at", models.DateTimeField(blank=True, null=True)),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("stop_time", models.DateTimeField(blank=True, null=True)),
                ("duration", models.DurationField(blank=True, null=True)),
                (
                    "royalty_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "avg_confidence_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("claimed", models.BooleanField(default=False)),
                ("flagged", models.BooleanField(default=False)),
                ("is_archived", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="station_playlog",
                        to="stations.station",
                    ),
                ),
                (
                    "station_program",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="station_program_playlog",
                        to="stations.stationprogram",
                    ),
                ),
                (
                    "track",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="track_playlog",
                        to="artists.track",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Dispute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dispute_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Flagged", "Flagged"),
                            ("Pending", "Pending"),
                            ("Verified", "Verified"),
                            ("Resolving", "Resolving"),
                            ("Review", "Review"),
                            ("Resolved", "Resolved"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("dispute_comments", models.TextField(blank=True, null=True)),
                ("resolve_comments", models.TextField(blank=True, null=True)),
                ("pending_at", models.DateTimeField(blank=True, null=True)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("resolving_time", models.DateTimeField(blank=True, null=True)),
                ("review_time", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DurationField(blank=True, null=True)),
                ("is_archived", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "playlog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dispute_playlog",
                        to="music_monitor.playlog",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoyaltyDistribution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "distribution_id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                (
                    "recipient_type",
                    models.CharField(
                        choices=[
                            ("artist", "Artist"),
                            ("publisher", "Publisher"),
                            ("contributor", "Contributor"),
                            ("pro", "Performing Rights Organization"),
                            ("external_pro", "External PRO (Reciprocal)"),
                        ],
                        max_length=20,
                    ),
                ),
                ("gross_amount", models.DecimalField(decimal_places=4, max_digits=12)),
                ("net_amount", models.DecimalField(decimal_places=4, max_digits=12)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GHS", "Ghana Cedi"),
                            ("USD", "US Dollar"),
                            ("EUR", "Euro"),
                            ("GBP", "British Pound"),
                        ],
                        default="GHS",
                        max_length=3,
                    ),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=6, default=1.0, max_digits=10),
                ),
                (
                    "percentage_split",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "contributor_role",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "pro_share",
                    models.DecimalField(decimal_places=4, default=0, max_digits=12),
                ),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Calculation"),
                            ("calculated", "Calculated"),
                            ("approved", "Approved for Payment"),
                            ("paid", "Paid"),
                            ("failed", "Payment Failed"),
                            ("disputed", "Under Dispute"),
                            ("withheld", "Withheld"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "payment_reference",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "payment_fee",
                    models.DecimalField(decimal_places=4, default=0, max_digits=10),
                ),
                ("calculation_metadata", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "audio_detection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="royalty_distributions",
                        to="music_monitor.audiodetection",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_distributions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-calculated_at"],
            },
        ),
    ]
